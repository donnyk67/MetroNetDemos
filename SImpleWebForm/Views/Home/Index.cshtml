@using SimpleWebForm.Models
@model SimpleWebForm.Models.FunFact
@{
    ViewBag.Title = "Home Page";
}


<div class="jumbotron">
    <h1>MetroNet Demo</h1>
    <p class="lead">Simple Web Form</p>
</div>

<div class="row" id="option1">
    <div class="col-md-4 col-xs-4" style="border:1px solid black">
        <h3>Introduce Yourself</h3>
        <p>
            Requirements:
            Page title should be “Team Introduction”.
            Page should have a simple HTML form that requests two fields of input: your name and a fun fact about yourself.
            The form should have a button to introduce yourself.
            When the submit button is clicked, both input fields should be validated and an alert message shown if there is an error.
            If there are no errors when the form is submitted:
            The validated data should be logged to the browser’s developer console.
            The form should be hidden and replaced with a new box displaying the input (name and fun fact).
            The “introduction box” should have a link or button to reset the form and allow “introducing” a different team member.
            Bonus: Use SCSS or describe how you’d refactor your CSS if SCSS was available in the build environment.
        </p>

    </div>
    
    @{
        if (ViewBag.HideForm != null)
        {
            <div class="col-md-4 col-xs-4" id="FunFactsDiv">
                <h3>Your Fun Facts</h3>
                @{
                    if (Model != null)
                    {
                        @Html.Partial("_FunFacts", Model)
                    }
                }
                @Html.ActionLink("Reset for new user / fact", "Index", "Home")

            </div>
        }
        else
        {
            using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                <div class="col-md-4 col-xs-4 form-horizontal">
                    <h3>Form Controls</h3>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.FormUserName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.FormUserName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FormUserName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.FormFunFact, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.FormFunFact, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FormFunFact, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <hr />
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Submit" class="btn btn-default btn-success" />

                        </div>
                    </div>

                </div>
            }
        }
    }

</div>

@*<br/>
<div class="row" id="option2">
    <div class="col-md-4 col-xs-4" style="border:1px solid black">
        <p>
            This is an optional way of doing things. (My Extra Credit I guess)
            Leave the form intact but just clear out the controls values
            when the form has been submitted.
            Comment out div named option1 and uncomment div named option2. 
        </p>

    </div>

    @using (Html.BeginForm(new { id = "signupform" }))
    {
        @Html.AntiForgeryToken()
        <div class="col-md-4 col-xs-4 form-horizontal">
            <h3>Form Controls</h3>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.FormUserName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.FormUserName, new { htmlAttributes = new { @class = "form-control", @id = "userName" } })
                    @Html.ValidationMessageFor(model => model.FormUserName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FormFunFact, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.FormFunFact, new { htmlAttributes = new { @class = "form-control", @id = "funFact" } })
                    @Html.ValidationMessageFor(model => model.FormFunFact, "", new { @class = "text-danger" })
                </div>
            </div>
            <hr />
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Submit" class="btn btn-default btn-success" />

                </div>
            </div>

        </div>
    }

    <div class="col-md-4 col-xs-4" id="FunFactsDiv">
        <h3>Your Fun Facts</h3>
        @{
            if (Model != null)
            {
                @Html.Partial("_FunFacts", Model)
            }
        }
    </div>

</div>*@



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


